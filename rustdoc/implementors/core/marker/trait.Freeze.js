(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl !Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Freeze for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Logger","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStyle","synthetic":true,"types":[]},{"text":"impl !Freeze for Filter","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Formatter","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampPrecision","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; Freeze for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalPool","synthetic":true,"types":[]},{"text":"impl Freeze for LocalSpawner","synthetic":true,"types":[]},{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; Freeze for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Freeze for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Freeze for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Freeze for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for JoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectAll&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for TryJoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectOk&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AbortHandle","synthetic":true,"types":[]},{"text":"impl Freeze for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Freeze for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Freeze for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Freeze for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Freeze for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Freeze for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; Freeze for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Freeze for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Freeze for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Freeze for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Freeze for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !Freeze for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Drain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Freeze for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Feed&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Freeze for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Freeze for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Freeze for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; Freeze for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Freeze for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Freeze for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Freeze for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Freeze for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, U:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]}];
implementors["partial_io"] = [{"text":"impl&lt;R&gt; Freeze for PartialAsyncRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PartialAsyncWrite&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PartialRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PartialWrite&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PartialOp","synthetic":true,"types":[]},{"text":"impl&lt;GE&gt; Freeze for PartialWithErrors&lt;GE&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GenInterrupted","synthetic":true,"types":[]},{"text":"impl Freeze for GenWouldBlock","synthetic":true,"types":[]},{"text":"impl Freeze for GenInterruptedWouldBlock","synthetic":true,"types":[]},{"text":"impl Freeze for GenNoErrors","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl Freeze for Gen","synthetic":true,"types":[]},{"text":"impl Freeze for QuickCheck","synthetic":true,"types":[]},{"text":"impl Freeze for TestResult","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformChar","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SmallRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Freeze for Slab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for FieldValue","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ItemEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTrait","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Freeze for ItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUse","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemType","synthetic":true,"types":[]},{"text":"impl Freeze for UseGlob","synthetic":true,"types":[]},{"text":"impl Freeze for UseGroup","synthetic":true,"types":[]},{"text":"impl Freeze for UseName","synthetic":true,"types":[]},{"text":"impl Freeze for UsePath","synthetic":true,"types":[]},{"text":"impl Freeze for UseRename","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for PatBox","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatLit","synthetic":true,"types":[]},{"text":"impl Freeze for PatMacro","synthetic":true,"types":[]},{"text":"impl Freeze for PatOr","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatRange","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatRest","synthetic":true,"types":[]},{"text":"impl Freeze for PatSlice","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Freeze for RangeLimits","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItem","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItem","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItem","synthetic":true,"types":[]},{"text":"impl Freeze for UseTree","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Stmt","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Freeze for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DuplexStream","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized, W:&nbsp;?Sized&gt; Freeze for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl Freeze for TryCurrentError","synthetic":true,"types":[]},{"text":"impl Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl !Freeze for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JoinHandle&lt;T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()